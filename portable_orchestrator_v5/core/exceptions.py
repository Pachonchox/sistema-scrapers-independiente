#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® Scraper v5 Custom Exceptions - Sistema de Excepciones Personalizado
=====================================================================

Sistema robusto de excepciones personalizadas para manejo granular de errores
en el scraping. Incluye categorizaci√≥n de errores, auto-recovery y logging
inteligente con emojis para facilitar debugging.

Features:
- üéØ Excepciones espec√≠ficas por tipo de error
- üìä Categorizaci√≥n autom√°tica de severidad
- üîÑ Sugerencias de recovery autom√°tico
- üìù Logging contextual mejorado
- ü©∫ Integraci√≥n con sistema de diagn√≥stico

Author: Portable Orchestrator Team  
Version: 5.0.0
"""

import sys
import io
from typing import Dict, List, Optional, Any
from enum import Enum

# Forzar soporte UTF-8 y emojis
if sys.platform == 'win32':
    if sys.stdout.encoding != 'utf-8':
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    if sys.stderr.encoding != 'utf-8':
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

class ErrorSeverity(Enum):
    """üìä Niveles de severidad de errores"""
    LOW = "low"           # Error menor, continuable
    MEDIUM = "medium"     # Error importante, requiere atenci√≥n
    HIGH = "high"         # Error grave, afecta funcionalidad
    CRITICAL = "critical" # Error cr√≠tico, requiere intervenci√≥n inmediata

class ErrorCategory(Enum):
    """üìÇ Categor√≠as de errores"""
    NETWORK = "network"         # Problemas de red/conectividad
    PARSING = "parsing"         # Errores de parsing HTML/CSS
    TIMEOUT = "timeout"         # Timeouts diversos
    BLOCKED = "blocked"         # Bloqueos/detecci√≥n de bot
    CONFIGURATION = "config"    # Errores de configuraci√≥n
    RESOURCE = "resource"       # Problemas de recursos (memoria, CPU)
    DATA = "data"              # Problemas con datos/formato
    SYSTEM = "system"          # Errores de sistema general

class ScraperV5Exception(Exception):
    """
    üö® Excepci√≥n base del sistema Scraper v5
    
    Clase base para todas las excepciones personalizadas del sistema.
    Incluye contexto adicional, severidad y sugerencias de recovery.
    """
    
    def __init__(self, 
                 message: str,
                 severity: ErrorSeverity = ErrorSeverity.MEDIUM,
                 category: ErrorCategory = ErrorCategory.SYSTEM,
                 context: Optional[Dict[str, Any]] = None,
                 recovery_suggestions: Optional[List[str]] = None,
                 original_exception: Optional[Exception] = None):
        """
        üö® Inicializar excepci√≥n personalizada
        
        Args:
            message: Mensaje descriptivo del error
            severity: Nivel de severidad del error
            category: Categor√≠a del error
            context: Contexto adicional (retailer, URL, etc.)
            recovery_suggestions: Lista de sugerencias para resolver el error
            original_exception: Excepci√≥n original si es wrapper
        """
        super().__init__(message)
        
        self.message = message
        self.severity = severity
        self.category = category
        self.context = context or {}
        self.recovery_suggestions = recovery_suggestions or []
        self.original_exception = original_exception
        
        # Emoji basado en severidad para logging
        self.emoji = {
            ErrorSeverity.LOW: "üü°",
            ErrorSeverity.MEDIUM: "üü†", 
            ErrorSeverity.HIGH: "üî¥",
            ErrorSeverity.CRITICAL: "üíÄ"
        }.get(severity, "‚ö†Ô∏è")
    
    def __str__(self) -> str:
        """Representaci√≥n string mejorada con emoji"""
        context_str = ""
        if self.context:
            context_items = [f"{k}={v}" for k, v in self.context.items()]
            context_str = f" [{', '.join(context_items)}]"
        
        return f"{self.emoji} {self.message}{context_str}"
    
    def get_detailed_info(self) -> Dict[str, Any]:
        """
        üìä Obtener informaci√≥n detallada de la excepci√≥n
        
        Returns:
            Dict con toda la informaci√≥n contextual
        """
        return {
            'message': self.message,
            'severity': self.severity.value,
            'category': self.category.value,
            'context': self.context,
            'recovery_suggestions': self.recovery_suggestions,
            'has_original_exception': self.original_exception is not None,
            'emoji': self.emoji
        }
    
    def suggest_recovery(self) -> List[str]:
        """
        üí° Obtener sugerencias de recovery espec√≠ficas
        
        Returns:
            Lista de sugerencias para resolver el error
        """
        base_suggestions = self.recovery_suggestions.copy()
        
        # Sugerencias autom√°ticas basadas en categor√≠a
        category_suggestions = {
            ErrorCategory.NETWORK: [
                "Verificar conexi√≥n a internet",
                "Revisar configuraci√≥n de proxy",
                "Intentar con diferentes DNS"
            ],
            ErrorCategory.TIMEOUT: [
                "Aumentar timeout en configuraci√≥n",
                "Verificar velocidad de conexi√≥n",
                "Reducir concurrencia"
            ],
            ErrorCategory.BLOCKED: [
                "Rotar user agents",
                "Cambiar proxy o IP",
                "Implementar delays m√°s largos",
                "Revisar patrones de comportamiento bot-like"
            ],
            ErrorCategory.PARSING: [
                "Actualizar selectores CSS",
                "Verificar estructura HTML del sitio",
                "Revisar cambios en la p√°gina objetivo"
            ]
        }
        
        auto_suggestions = category_suggestions.get(self.category, [])
        return base_suggestions + auto_suggestions

# ==========================================
# EXCEPCIONES DE CONECTIVIDAD Y RED
# ==========================================

class NetworkException(ScraperV5Exception):
    """üåê Excepci√≥n para problemas de red y conectividad"""
    
    def __init__(self, message: str, url: Optional[str] = None, 
                 status_code: Optional[int] = None, **kwargs):
        context = kwargs.get('context', {})
        if url:
            context['url'] = url
        if status_code:
            context['status_code'] = status_code
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.NETWORK,
            context=context,
            **kwargs
        )

class TimeoutException(ScraperV5Exception):
    """‚è∞ Excepci√≥n para timeouts diversos"""
    
    def __init__(self, message: str, timeout_seconds: Optional[float] = None,
                 operation: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        if timeout_seconds:
            context['timeout_seconds'] = timeout_seconds
        if operation:
            context['operation'] = operation
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.MEDIUM,
            category=ErrorCategory.TIMEOUT,
            recovery_suggestions=[
                f"Aumentar timeout (actual: {timeout_seconds}s)" if timeout_seconds else "Aumentar timeout",
                "Verificar estabilidad de conexi√≥n",
                "Reducir complejidad de la operaci√≥n"
            ],
            context=context,
            **kwargs
        )

class RetailerBlockedException(ScraperV5Exception):
    """üö´ Excepci√≥n cuando el retailer bloquea/detecta el bot"""
    
    def __init__(self, retailer: str, url: Optional[str] = None, 
                 detection_indicators: Optional[List[str]] = None, **kwargs):
        context = kwargs.get('context', {})
        context['retailer'] = retailer
        if url:
            context['blocked_url'] = url
        if detection_indicators:
            context['detection_indicators'] = detection_indicators
            
        message = f"Retailer '{retailer}' bloque√≥ el acceso"
        if detection_indicators:
            message += f". Indicadores: {', '.join(detection_indicators)}"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.CRITICAL,
            category=ErrorCategory.BLOCKED,
            recovery_suggestions=[
                "Cambiar user agent inmediatamente",
                "Rotar proxy o IP",
                "Implementar delays m√°s largos entre requests",
                "Revisar patrones de navegaci√≥n",
                "Considerar usar navegador real (no headless)"
            ],
            context=context,
            **kwargs
        )

class ProxyFailureException(ScraperV5Exception):
    """üåê Excepci√≥n para fallos de proxy"""
    
    def __init__(self, proxy_url: str, failure_reason: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['proxy_url'] = proxy_url
        if failure_reason:
            context['failure_reason'] = failure_reason
            
        message = f"Proxy fall√≥: {proxy_url}"
        if failure_reason:
            message += f" - {failure_reason}"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.NETWORK,
            recovery_suggestions=[
                "Cambiar a proxy diferente",
                "Verificar credenciales del proxy",
                "Probar conexi√≥n directa sin proxy",
                "Revisar configuraci√≥n de proxy"
            ],
            context=context,
            **kwargs
        )

# ==========================================
# EXCEPCIONES DE PARSING Y SELECTORES
# ==========================================

class SelectorNotFoundException(ScraperV5Exception):
    """üéØ Excepci√≥n cuando un selector CSS no encuentra elementos"""
    
    def __init__(self, selector: str, url: Optional[str] = None,
                 expected_elements: Optional[int] = None, **kwargs):
        context = kwargs.get('context', {})
        context['selector'] = selector
        if url:
            context['url'] = url
        if expected_elements:
            context['expected_elements'] = expected_elements
            
        message = f"Selector no encontr√≥ elementos: '{selector}'"
        if expected_elements:
            message += f" (esperados: {expected_elements})"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.PARSING,
            recovery_suggestions=[
                "Verificar que el selector CSS sea correcto",
                "Revisar si la estructura HTML del sitio cambi√≥",
                "Capturar screenshot de la p√°gina para an√°lisis",
                "Probar selectores alternativos",
                "Verificar que la p√°gina carg√≥ completamente"
            ],
            context=context,
            **kwargs
        )

class DataParsingException(ScraperV5Exception):
    """üìä Excepci√≥n para errores de parsing de datos"""
    
    def __init__(self, field_name: str, raw_data: Optional[str] = None,
                 expected_format: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['field_name'] = field_name
        if raw_data:
            context['raw_data'] = raw_data[:100]  # Truncar para logging
        if expected_format:
            context['expected_format'] = expected_format
            
        message = f"Error parseando campo '{field_name}'"
        if expected_format:
            message += f" (formato esperado: {expected_format})"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.MEDIUM,
            category=ErrorCategory.PARSING,
            recovery_suggestions=[
                "Revisar expresiones regulares de parsing",
                "Validar formato de datos en el sitio",
                "Implementar parsing alternativo",
                "Agregar validaci√≥n de datos m√°s robusta"
            ],
            context=context,
            **kwargs
        )

class CategoryEmptyException(ScraperV5Exception):
    """üìÇ Excepci√≥n cuando una categor√≠a no tiene productos"""
    
    def __init__(self, category: str, retailer: Optional[str] = None,
                 url: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['category'] = category
        if retailer:
            context['retailer'] = retailer
        if url:
            context['category_url'] = url
            
        message = f"Categor√≠a '{category}' sin productos"
        if retailer:
            message += f" en {retailer}"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.LOW,  # Puede ser temporal
            category=ErrorCategory.DATA,
            recovery_suggestions=[
                "Verificar que la URL de categor√≠a sea correcta",
                "Revisar si hay filtros aplicados que oculten productos",
                "Confirmar que la categor√≠a existe en el sitio",
                "Probar en horarios diferentes (puede ser temporal)"
            ],
            context=context,
            **kwargs
        )

# ==========================================
# EXCEPCIONES DE CONFIGURACI√ìN
# ==========================================

class ConfigurationException(ScraperV5Exception):
    """‚öôÔ∏è Excepci√≥n para errores de configuraci√≥n"""
    
    def __init__(self, config_key: str, config_value: Optional[Any] = None,
                 expected_type: Optional[type] = None, **kwargs):
        context = kwargs.get('context', {})
        context['config_key'] = config_key
        if config_value is not None:
            context['config_value'] = str(config_value)
        if expected_type:
            context['expected_type'] = expected_type.__name__
            
        message = f"Error en configuraci√≥n: '{config_key}'"
        if expected_type and config_value is not None:
            message += f" (esperado: {expected_type.__name__}, actual: {type(config_value).__name__})"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.CONFIGURATION,
            recovery_suggestions=[
                "Revisar archivo de configuraci√≥n",
                "Validar formato y tipos de datos",
                "Consultar documentaci√≥n de configuraci√≥n",
                "Restaurar configuraci√≥n por defecto si es necesario"
            ],
            context=context,
            **kwargs
        )

class RetailerNotConfiguredException(ScraperV5Exception):
    """üè™ Excepci√≥n cuando un retailer no est√° configurado"""
    
    def __init__(self, retailer: str, available_retailers: Optional[List[str]] = None, **kwargs):
        context = kwargs.get('context', {})
        context['retailer'] = retailer
        if available_retailers:
            context['available_retailers'] = available_retailers
            
        message = f"Retailer '{retailer}' no est√° configurado"
        if available_retailers:
            message += f". Disponibles: {', '.join(available_retailers)}"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.CONFIGURATION,
            recovery_suggestions=[
                f"Agregar configuraci√≥n para retailer '{retailer}'",
                "Verificar nombre del retailer (sensible a may√∫sculas)",
                "Revisar lista de retailers disponibles",
                "Consultar documentaci√≥n de configuraci√≥n"
            ],
            context=context,
            **kwargs
        )

# ==========================================
# EXCEPCIONES DE RECURSOS
# ==========================================

class ResourceExhaustedException(ScraperV5Exception):
    """üíæ Excepci√≥n cuando se agotan recursos (memoria, CPU, etc.)"""
    
    def __init__(self, resource_type: str, current_usage: Optional[float] = None,
                 limit: Optional[float] = None, **kwargs):
        context = kwargs.get('context', {})
        context['resource_type'] = resource_type
        if current_usage is not None:
            context['current_usage'] = current_usage
        if limit is not None:
            context['limit'] = limit
            
        message = f"Recurso agotado: {resource_type}"
        if current_usage is not None and limit is not None:
            message += f" ({current_usage:.1f}/{limit:.1f})"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.CRITICAL,
            category=ErrorCategory.RESOURCE,
            recovery_suggestions=[
                "Reducir n√∫mero de tareas concurrentes",
                "Optimizar uso de memoria",
                "Implementar garbage collection manual",
                "Revisar memory leaks en el c√≥digo",
                "Considerar aumentar l√≠mites de recursos"
            ],
            context=context,
            **kwargs
        )

class RateLimitExceededException(ScraperV5Exception):
    """üö¶ Excepci√≥n cuando se excede rate limit"""
    
    def __init__(self, retailer: str, current_rate: Optional[float] = None,
                 limit: Optional[float] = None, retry_after: Optional[int] = None, **kwargs):
        context = kwargs.get('context', {})
        context['retailer'] = retailer
        if current_rate is not None:
            context['current_rate'] = current_rate
        if limit is not None:
            context['rate_limit'] = limit
        if retry_after is not None:
            context['retry_after_seconds'] = retry_after
            
        message = f"Rate limit excedido para {retailer}"
        if retry_after:
            message += f". Reintentar en {retry_after}s"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.MEDIUM,
            category=ErrorCategory.NETWORK,
            recovery_suggestions=[
                f"Esperar {retry_after} segundos antes de reintentar" if retry_after else "Implementar delay entre requests",
                "Reducir rate de requests",
                "Distribuir carga entre m√∫ltiples IPs/proxies",
                "Revisar configuraci√≥n de rate limiting"
            ],
            context=context,
            **kwargs
        )

# ==========================================
# EXCEPCIONES DE SISTEMA Y ML
# ==========================================

class MLModelException(ScraperV5Exception):
    """ü§ñ Excepci√≥n para errores en modelos ML"""
    
    def __init__(self, model_name: str, operation: Optional[str] = None,
                 model_path: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['model_name'] = model_name
        if operation:
            context['operation'] = operation
        if model_path:
            context['model_path'] = model_path
            
        message = f"Error en modelo ML: {model_name}"
        if operation:
            message += f" durante operaci√≥n: {operation}"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.SYSTEM,
            recovery_suggestions=[
                "Verificar que el modelo existe y est√° accesible",
                "Reentrenar modelo si est√° corrupto",
                "Usar modelo fallback si est√° disponible",
                "Revisar logs de entrenamiento del modelo"
            ],
            context=context,
            **kwargs
        )

class DatabaseException(ScraperV5Exception):
    """üóÑÔ∏è Excepci√≥n para errores de base de datos"""
    
    def __init__(self, operation: str, table: Optional[str] = None,
                 db_error: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['operation'] = operation
        if table:
            context['table'] = table
        if db_error:
            context['db_error'] = db_error
            
        message = f"Error de base de datos en operaci√≥n: {operation}"
        if table:
            message += f" (tabla: {table})"
            
        super().__init__(
            message=message,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.SYSTEM,
            recovery_suggestions=[
                "Verificar conexi√≥n a base de datos",
                "Revisar permisos de acceso",
                "Validar estructura de tabla",
                "Probar con operaci√≥n m√°s simple",
                "Revisar logs de base de datos"
            ],
            context=context,
            **kwargs
        )

# ==========================================
# FUNCIONES DE UTILIDAD
# ==========================================

def create_exception_from_error(error: Exception, 
                               context: Optional[Dict[str, Any]] = None) -> ScraperV5Exception:
    """
    üîÑ Crear excepci√≥n personalizada a partir de error gen√©rico
    
    Args:
        error: Excepci√≥n original
        context: Contexto adicional
        
    Returns:
        ScraperV5Exception: Excepci√≥n personalizada apropiada
    """
    error_str = str(error).lower()
    error_type = type(error).__name__
    
    # Mapeo inteligente de errores comunes
    if 'timeout' in error_str or 'timed out' in error_str:
        return TimeoutException(
            message=str(error),
            context=context,
            original_exception=error
        )
    elif 'connection' in error_str or 'network' in error_str:
        return NetworkException(
            message=str(error),
            context=context,
            original_exception=error
        )
    elif 'blocked' in error_str or '403' in error_str or 'forbidden' in error_str:
        retailer = context.get('retailer', 'unknown') if context else 'unknown'
        return RetailerBlockedException(
            retailer=retailer,
            detection_indicators=[error_str],
            context=context,
            original_exception=error
        )
    elif 'selector' in error_str or 'css' in error_str:
        return SelectorNotFoundException(
            selector=context.get('selector', 'unknown') if context else 'unknown',
            context=context,
            original_exception=error
        )
    else:
        # Excepci√≥n gen√©rica con categorizaci√≥n autom√°tica
        category = ErrorCategory.SYSTEM
        if 'parse' in error_str:
            category = ErrorCategory.PARSING
        elif 'config' in error_str:
            category = ErrorCategory.CONFIGURATION
        
        return ScraperV5Exception(
            message=str(error),
            category=category,
            context=context,
            original_exception=error
        )

def log_exception(exception: ScraperV5Exception, 
                 logger_instance=None) -> None:
    """
    üìù Log excepci√≥n con formato mejorado
    
    Args:
        exception: Excepci√≥n a loggear
        logger_instance: Logger a usar (opcional)
    """
    import logging
    
    if logger_instance is None:
        logger_instance = logging.getLogger(__name__)
    
    # Determinar nivel de log basado en severidad
    log_level = {
        ErrorSeverity.LOW: logging.INFO,
        ErrorSeverity.MEDIUM: logging.WARNING,
        ErrorSeverity.HIGH: logging.ERROR,
        ErrorSeverity.CRITICAL: logging.CRITICAL
    }.get(exception.severity, logging.ERROR)
    
    # Log principal
    logger_instance.log(log_level, str(exception))
    
    # Log de contexto si existe
    if exception.context:
        context_items = [f"{k}={v}" for k, v in exception.context.items()]
        logger_instance.log(log_level, f"   üìä Contexto: {', '.join(context_items)}")
    
    # Log de sugerencias de recovery
    suggestions = exception.suggest_recovery()
    if suggestions:
        logger_instance.log(log_level, f"   üí° Sugerencias de recovery:")
        for suggestion in suggestions[:3]:  # M√°ximo 3 sugerencias
            logger_instance.log(log_level, f"      - {suggestion}")

# ==========================================
# DECORADOR PARA MANEJO AUTOM√ÅTICO DE ERRORES  
# ==========================================

def handle_scraper_exceptions(retailer: Optional[str] = None,
                             operation: Optional[str] = None):
    """
    üîÑ Decorador para manejo autom√°tico de excepciones
    
    Args:
        retailer: Nombre del retailer (para contexto)
        operation: Nombre de la operaci√≥n (para contexto)
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except ScraperV5Exception:
                # Re-raise excepciones propias
                raise
            except Exception as e:
                # Convertir a excepci√≥n personalizada
                context = {}
                if retailer:
                    context['retailer'] = retailer
                if operation:
                    context['operation'] = operation
                
                custom_exception = create_exception_from_error(e, context)
                log_exception(custom_exception)
                raise custom_exception
        
        return wrapper
    return decorator

# Ejemplo de uso del decorador:
# @handle_scraper_exceptions(retailer="ripley", operation="parse_products")
# def parse_products(html_content):
#     # C√≥digo que puede fallar
#     pass