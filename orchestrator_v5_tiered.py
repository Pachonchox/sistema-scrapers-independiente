#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
üéØ ORQUESTADOR V5 CON SISTEMA DE TIERS INTELIGENTE
=================================================

Orquestador de producci√≥n V5 con sistema de tiers integrado que reemplaza
los ciclos continuos por scheduling inteligente basado en frecuencias.

Caracter√≠sticas principales:
- üéöÔ∏è Sistema de tiers (2h/6h/24h) para operaci√≥n continua optimizada
- üé≠ Anti-detecci√≥n integrado (proxies, user agents, patrones humanos)
- üìä Integraci√≥n completa con Master System y PostgreSQL
- üí∞ Detecci√≥n autom√°tica de arbitraje con ML
- üì± Alertas y notificaciones via Telegram
- üîÑ Rotaci√≥n inteligente de p√°ginas y categor√≠as
- ‚ö° Operaci√≥n 24/7 sin patrones sospechosos

Autor: Sistema V5 Production
Fecha: 03/09/2025
"""

import asyncio
import sys
import os
import signal
import logging
import traceback
import argparse
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import json

# Configurar paths
sys.path.append(str(Path(__file__).parent.parent))
sys.path.append(str(Path(__file__).parent))

# FORZAR SOPORTE COMPLETO DE EMOJIS
from portable_orchestrator_v5.core.emoji_support import force_emoji_support
force_emoji_support()

# Configurar UTF-8
import locale
try:
    locale.setlocale(locale.LC_ALL, 'es_CL.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Spanish_Chile.1252')
    except:
        pass

# Importar el orquestrador robusto existente y la integraci√≥n de tiers
from orchestrator_v5_robust import OrchestratorV5Robust
from portable_orchestrator_v5.core.tiered_orchestrator_integration import TieredOrchestratorIntegration

# Configurar logging con emojis
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(
            f'logs/orchestrator_v5_tiered_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log',
            encoding='utf-8'
        )
    ]
)

logger = logging.getLogger(__name__)


class OrchestratorV5Tiered:
    """
    üéØ Orquestador V5 con sistema de tiers inteligente
    
    Combina todas las funcionalidades del orquestrador robusto V5
    con el nuevo sistema de tiers para operaci√≥n continua optimizada.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Inicializar orquestador con sistema de tiers
        
        Args:
            config: Configuraci√≥n personalizada del sistema
        """
        logger.info("üéØ Inicializando Orquestador V5 con Sistema de Tiers...")
        
        # Configuraci√≥n por defecto
        self.config = {
            'retailers': ['ripley', 'falabella', 'paris', 'hites', 'abcdin'],
            'categories': {
                'ripley': ['celulares', 'tablets', 'computadores', 'televisores'],
                'falabella': ['celulares', 'tablets', 'computadores', 'televisores'],
                'paris': ['celulares', 'tablets', 'computadores', 'televisores'],
                'hites': ['celulares', 'computadores', 'televisores'],
                'abcdin': ['celulares', 'computadores', 'tablets', 'televisores']
            },
            'tier_system_enabled': True,
            'arbitrage_enabled': True,
            'telegram_enabled': True,
            'master_system_enabled': True,
            'postgres_enabled': True,
            'anti_detection_enabled': True,
            'continuous_mode': True,
            'max_runtime_hours': None,
            'test_mode': False
        }
        
        # Actualizar con configuraci√≥n personalizada
        if config:
            self.config.update(config)
        
        # Crear instancia del orquestador robusto original
        self.base_orchestrator = OrchestratorV5Robust()
        
        # Aplicar configuraci√≥n al orquestador base
        self.base_orchestrator.config.update(self.config)
        
        # Crear integraci√≥n de tiers
        self.tier_integration = TieredOrchestratorIntegration(self.base_orchestrator)
        
        # Estado del sistema
        self.running = False
        self.start_time = None
        self.stats = {
            'total_runtime_hours': 0,
            'tier_executions': {'critical': 0, 'important': 0, 'tracking': 0},
            'total_products_processed': 0,
            'arbitrage_opportunities_found': 0,
            'anti_detection_activations': 0,
            'errors_handled': 0,
            'system_restarts': 0
        }
        
        logger.info("‚úÖ Orquestador V5 Tiered inicializado correctamente")
        
        # Configurar manejo de se√±ales
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self):
        """Configurar manejo de se√±ales para shutdown graceful"""
        def signal_handler(signum, frame):
            logger.info(f"üì¢ Se√±al recibida: {signum}. Iniciando shutdown graceful...")
            asyncio.create_task(self.stop())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def start(self, **kwargs):
        """
        üöÄ Iniciar el orquestador con sistema de tiers
        
        Args:
            continuous: Modo continuo (default: True)
            max_runtime_hours: M√°ximo tiempo de ejecuci√≥n
            test_mode: Modo de prueba con tiempo limitado
            retailers: Lista espec√≠fica de retailers
            categories: Categor√≠as espec√≠ficas por retailer
        """
        try:
            self.running = True
            self.start_time = datetime.now()
            
            # Actualizar configuraci√≥n con par√°metros de inicio
            if 'continuous' in kwargs:
                self.config['continuous_mode'] = kwargs['continuous']
            if 'max_runtime_hours' in kwargs:
                self.config['max_runtime_hours'] = kwargs['max_runtime_hours']
            if 'test_mode' in kwargs:
                self.config['test_mode'] = kwargs['test_mode']
            if 'retailers' in kwargs:
                self.config['retailers'] = kwargs['retailers']
            if 'categories' in kwargs:
                self.config['categories'] = kwargs['categories']
            
            logger.info("üöÄ INICIANDO ORQUESTADOR V5 CON SISTEMA DE TIERS")
            logger.info("=" * 60)
            logger.info(f"üéöÔ∏è Sistema de Tiers: {'‚úÖ ACTIVADO' if self.config['tier_system_enabled'] else '‚ùå DESACTIVADO'}")
            logger.info(f"üé≠ Anti-detecci√≥n: {'‚úÖ ACTIVADO' if self.config['anti_detection_enabled'] else '‚ùå DESACTIVADO'}")
            logger.info(f"üí∞ Arbitraje: {'‚úÖ ACTIVADO' if self.config['arbitrage_enabled'] else '‚ùå DESACTIVADO'}")
            logger.info(f"üì± Telegram: {'‚úÖ ACTIVADO' if self.config['telegram_enabled'] else '‚ùå DESACTIVADO'}")
            logger.info(f"üîÑ Modo continuo: {'‚úÖ S√ç' if self.config['continuous_mode'] else '‚ùå NO'}")
            logger.info(f"‚è∞ Tiempo m√°ximo: {self.config['max_runtime_hours'] or 'ILIMITADO'} horas")
            logger.info(f"üõçÔ∏è Retailers: {', '.join(self.config['retailers'])}")
            logger.info("=" * 60)
            
            # Inicializar el orquestador base
            logger.info("üîß Inicializando sistemas base...")
            # El orquestador robusto se inicializa autom√°ticamente en __init__
            
            if self.config['tier_system_enabled']:
                # Usar sistema de tiers inteligente
                logger.info("üéöÔ∏è Iniciando sistema de tiers inteligente...")
                await self.tier_integration.start(
                    continuous=self.config['continuous_mode'],
                    max_runtime_hours=self.config['max_runtime_hours']
                )
            else:
                # Usar el sistema tradicional de ciclos continuos
                logger.info("üîÑ Usando sistema tradicional de ciclos continuos...")
                await self._run_traditional_mode()
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en el orquestador: {e}")
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            self.stats['errors_handled'] += 1
            raise
        
        finally:
            await self.stop()
    
    async def _run_traditional_mode(self):
        """üîÑ Ejecutar en modo tradicional (sin tiers)"""
        logger.info("üîÑ Ejecutando en modo tradicional...")
        
        cycle = 0
        
        while self.running and self.config['continuous_mode']:
            cycle += 1
            logger.info(f"üîÑ Iniciando ciclo tradicional #{cycle}")
            
            try:
                # Ejecutar ciclo del orquestador base
                await self.base_orchestrator.run_cycle()
                
                # Verificar l√≠mite de tiempo
                if self.config['max_runtime_hours']:
                    elapsed = (datetime.now() - self.start_time).total_seconds() / 3600
                    if elapsed >= self.config['max_runtime_hours']:
                        logger.info(f"‚è∞ L√≠mite de tiempo alcanzado: {self.config['max_runtime_hours']}h")
                        break
                
                # Pausa entre ciclos
                if self.config['continuous_mode']:
                    await asyncio.sleep(300)  # 5 minutos entre ciclos
                
            except Exception as e:
                logger.error(f"‚ùå Error en ciclo #{cycle}: {e}")
                self.stats['errors_handled'] += 1
                await asyncio.sleep(60)  # Pausa m√°s corta en caso de error
        
        # Si no es continuo, ejecutar solo un ciclo
        if not self.config['continuous_mode']:
            await self.base_orchestrator.run_cycle()
    
    async def stop(self):
        """üõë Detener el orquestador de forma graceful"""
        if not self.running:
            return
        
        logger.info("üõë Deteniendo Orquestador V5 Tiered...")
        
        self.running = False
        
        # Detener integraci√≥n de tiers
        if self.tier_integration:
            await self.tier_integration.stop()
        
        # Detener orquestador base
        if hasattr(self.base_orchestrator, 'stop'):
            await self.base_orchestrator.stop()
        
        # Calcular estad√≠sticas finales
        if self.start_time:
            total_time = (datetime.now() - self.start_time).total_seconds() / 3600
            self.stats['total_runtime_hours'] = round(total_time, 2)
        
        # Mostrar estad√≠sticas finales
        self._log_final_statistics()
        
        logger.info("‚úÖ Orquestador V5 Tiered detenido correctamente")
    
    def _log_final_statistics(self):
        """üìä Mostrar estad√≠sticas finales del sistema"""
        logger.info("üìä ESTAD√çSTICAS FINALES DEL ORQUESTADOR V5 TIERED")
        logger.info("=" * 60)
        logger.info(f"‚è∞ Tiempo total de ejecuci√≥n: {self.stats['total_runtime_hours']} horas")
        
        if self.tier_integration:
            tier_stats = self.tier_integration.get_integration_status()
            logger.info(f"üéöÔ∏è Ejecuciones por tier: {tier_stats['stats']['tier_executions']}")
            logger.info(f"üìà Sesiones de scraping: {tier_stats['stats']['total_scraping_sessions']}")
            logger.info(f"üé≠ Activaciones anti-detecci√≥n: {tier_stats['stats']['anti_detection_activations']}")
            logger.info(f"üîÑ Rotaciones de proxy: {tier_stats['stats']['proxy_rotations']}")
            logger.info(f"üé™ Cambios de user agent: {tier_stats['stats']['user_agent_changes']}")
            logger.info(f"üé≤ Rupturas de patr√≥n: {tier_stats['stats']['pattern_breaks']}")
        
        if hasattr(self.base_orchestrator, 'stats'):
            base_stats = self.base_orchestrator.stats
            logger.info(f"üì¶ Productos procesados: {base_stats.get('products_processed', 0)}")
            logger.info(f"üí∞ Oportunidades de arbitraje: {base_stats.get('arbitrage_opportunities', 0)}")
            logger.info(f"üîÑ Ciclos completados: {base_stats.get('cycles_completed', 0)}")
        
        logger.info(f"‚ùå Errores manejados: {self.stats['errors_handled']}")
        logger.info("=" * 60)
    
    def get_system_status(self) -> Dict[str, Any]:
        """üìä Obtener estado completo del sistema"""
        status = {
            'running': self.running,
            'config': self.config.copy(),
            'stats': self.stats.copy(),
            'start_time': self.start_time,
            'current_time': datetime.now(),
            'uptime_hours': 0
        }
        
        if self.start_time:
            status['uptime_hours'] = round(
                (datetime.now() - self.start_time).total_seconds() / 3600, 2
            )
        
        # Agregar estado de la integraci√≥n de tiers
        if self.tier_integration:
            status['tier_integration'] = self.tier_integration.get_integration_status()
        
        # Agregar estado del orquestador base
        if hasattr(self.base_orchestrator, 'get_status'):
            status['base_orchestrator'] = self.base_orchestrator.get_status()
        
        return status


async def main():
    """üöÄ Funci√≥n principal del orquestador V5 Tiered"""
    parser = argparse.ArgumentParser(
        description='üéØ Orquestador V5 con Sistema de Tiers Inteligente'
    )
    
    parser.add_argument(
        '--retailers',
        nargs='+',
        default=['ripley', 'falabella', 'paris'],
        help='Lista de retailers a procesar'
    )
    
    parser.add_argument(
        '--continuous',
        action='store_true',
        default=True,
        help='Ejecutar en modo continuo'
    )
    
    parser.add_argument(
        '--max-runtime',
        type=float,
        help='Tiempo m√°ximo de ejecuci√≥n en horas'
    )
    
    parser.add_argument(
        '--test',
        action='store_true',
        help='Modo de prueba (10 minutos)'
    )
    
    parser.add_argument(
        '--disable-tiers',
        action='store_true',
        help='Desactivar sistema de tiers (usar modo tradicional)'
    )
    
    parser.add_argument(
        '--disable-arbitrage',
        action='store_true',
        help='Desactivar detecci√≥n de arbitraje'
    )
    
    parser.add_argument(
        '--disable-telegram',
        action='store_true',
        help='Desactivar notificaciones de Telegram'
    )
    
    args = parser.parse_args()
    
    # Configurar bas√°ndose en argumentos
    config = {
        'retailers': args.retailers,
        'continuous_mode': args.continuous,
        'max_runtime_hours': args.max_runtime,
        'test_mode': args.test,
        'tier_system_enabled': not args.disable_tiers,
        'arbitrage_enabled': not args.disable_arbitrage,
        'telegram_enabled': not args.disable_telegram
    }
    
    # Modo de prueba
    if args.test:
        config['max_runtime_hours'] = 0.167  # 10 minutos
        config['test_mode'] = True
    
    orchestrator = OrchestratorV5Tiered(config)
    
    try:
        await orchestrator.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Ejecuci√≥n interrumpida por usuario")
        
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico: {e}")
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        
    finally:
        await orchestrator.stop()


if __name__ == "__main__":
    # Crear directorios de logs si no existen
    os.makedirs('logs', exist_ok=True)
    
    # Ejecutar orquestador
    asyncio.run(main())